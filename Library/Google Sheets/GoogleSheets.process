<?xml version="1.0" encoding="utf-8"?>
<Root>
  <DesignerItems>
    <DesignerItem>
      <Left>180</Left>
      <Top>50</Top>
      <Width>70</Width>
      <Height>70</Height>
      <ID>1a09e16b-cca9-4626-a319-2030b116f4f5</ID>
      <zIndex>2</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Старт" InternalName="Start" FriendlyName="С блока Старт начинается работа диаграммы. В диаграмме может быть только один такой блок." Width="70" Height="70" PathToImage="ExternalToolboxes\Image\ico_Process Start.png" PathToToolboxImage="ExternalToolboxes\Image\icotb_Process Start.png" ImageType="OnlyImage" NoDelete="False" Invisible="False" Proportional="True" Version="10" Code="&amp;#xA;function Start{{{block_id}}}&amp;#xA;{                  &amp;#xA;    try&amp;#xA;    {&amp;#xA;    $currentblockid = &amp;quot;{{{block_native_id}}}&amp;quot;;   &amp;#xA;    &amp;#xA;        $Value        = {{{Value}}};&amp;#xA;        $SendOrkest   = ${{{SendOrkest}}};&amp;#xA;        $IsScreenshot = ${{{IsScreenshot}}};&amp;#xA;        &amp;#xA;        $ValueStr = VarToString($Value); &amp;#xA;             &amp;#xA;        $val = _shield $ValueStr;&amp;#xA;        if($SendOrkest -or $IsScreenshot)&amp;#xA;        {                      &amp;#xA;            if($val.Length -eq 0)&amp;#xA;            {&amp;#xA;                $val = &amp;quot;Screenshot &amp;quot;+[DateTime]::Now.ToString();&amp;#xA;            }&amp;#xA;            Write-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;SendLogOrkest&amp;lt;/InternalName&amp;gt;&amp;lt;UITextValue&amp;gt;$val&amp;lt;/UITextValue&amp;gt;&amp;lt;UITextType&amp;gt;Info&amp;lt;/UITextType&amp;gt;&amp;lt;IsScreenshot&amp;gt;{{{IsScreenshot}}}&amp;lt;/IsScreenshot&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;        if($val.Length -gt 0)&amp;#xA;        {&amp;#xA;            $xmlvar = &amp;quot;&amp;quot;;&amp;#xA;            try&amp;#xA;            {&amp;#xA;                $xmlvar = $script:__BinFormatter.vartoxmlraw($Value);&amp;#xA;            }&amp;#xA;            catch{} &amp;#xA;            Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;Log&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$val&amp;lt;/InternalValue&amp;gt;$xmlvar&amp;lt;/info&amp;gt;&amp;quot;);&amp;#xA;        }&amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;    }&amp;#xA;    &amp;#xA;    try&amp;#xA;    {&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable1}}} = {{{Expression1}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable1: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable2}}} = {{{Expression2}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable2: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable3}}} = {{{Expression3}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable3: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable4}}} = {{{Expression4}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable4: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable5}}} = {{{Expression5}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable5: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression6}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression6: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression7}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression7: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression8}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression8: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression9}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression9: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression10}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression10: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        &amp;#xA;    }&amp;#xA;    catch {}&amp;#xA;    &amp;#xA;    $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;);&amp;#xA;    &amp;#xA;    $script:__NextBlockID = &amp;quot;{{{connector-Next}}}&amp;quot;;&amp;#xA;}                   &amp;#xA;                " TextColor="#FF000000" ProtoName="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="32"&gt;&lt;Property Name="Value" Tooltip="[Любой тип данных] Числовая, текстовая константа (в кавычках), имя переменной (начинающееся с $) или любое выражение, значение которого будет выведено в лог в процессе работы сценария робота. Значение может в том числе иметь сложный тип данных, например Список, Таблица или Словарь." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Записать в лог" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable1" Tooltip="[Переменная] Имя первой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression1" Tooltip="[Любой тип данных] Новое значение первой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable2" Tooltip="[Переменная] Имя второй переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression2" Tooltip="[Любой тип данных] Новое значение второй переменной. Свойство игнорируется, если не задано имя второй переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable3" Tooltip="[Переменная] Имя третьей переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression3" Tooltip="[Любой тип данных] Новое значение третьей переменной. Свойство игнорируется, если не задано имя третьей переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable4" Tooltip="[Переменная] Имя четвертой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression4" Tooltip="[Любой тип данных] Новое значение четвертой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable5" Tooltip="[Переменная] Имя пятой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression5" Tooltip="[Любой тип данных] Новое значение пятой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression6" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression7" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression8" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression9" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression10" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="SendOrkest" Tooltip="Если выбрано, то текст будет также логироваться в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Логировать в оркестратор" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="IsScreenshot" Tooltip="Если выбрано, то будет создан скриншот экрана и отправлен в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Скриншот в оркестратор" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то, если это главная диаграмма, будет использоваться значение &amp;quot;Handle&amp;quot;, иначе будет использоваться значение блока &amp;quot;Старт&amp;quot; главной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorDirection" Tooltip="Выбор направления выхода из блока при возникновении ошибки. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Right&amp;quot; - направо; &amp;quot;Bottom&amp;quot; - вниз. Данное свойство позволяет определить направление выхода при возникновении ошибок для блоков не содержащих коннектора &amp;quot;Если ошибка&amp;quot; (например блок &amp;quot;Условие&amp;quot;). Если выбрано значение &amp;quot;Default&amp;quot;, то, если это главная диаграмма, будет использоваться значение &amp;quot;Bottom&amp;quot;, иначе будет использоваться значение блока &amp;quot;Старт&amp;quot; главной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Right;Bottom" Caption="Направление выхода" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то, если это главная диаграмма, будет использоваться значение &amp;quot;Debug&amp;quot;, иначе будет использоваться значение блока &amp;quot;Старт&amp;quot; главной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="{x:Null}" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>115</Left>
      <Top>175</Top>
      <Width>200</Width>
      <Height>75</Height>
      <ID>622abc5c-daf8-4926-a76e-06b91900f4ff</ID>
      <zIndex>4</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Получить значение ячейки" InternalName="GetGoogleSheetsCellValue" FriendlyName="Считать значение ячейки из Google Таблицы" Width="200" Height="75" PathToImage="ExternalToolboxes\Image\google-sheets 1.png" PathToToolboxImage="{x:Null}" ImageType="LeftImage" NoDelete="False" Invisible="False" Proportional="True" Version="35" Code="&amp;#xA;function GetGoogleSheetsCellValue{{{block_id}}}&amp;#xA;{&amp;#xA; try&amp;#xA; {&amp;#xA;    {AddTypesGoogleSheets}&amp;#xA;    &amp;#xA;    $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;);&amp;#xA;    $__Error.AddConnectors(&amp;quot;{{{connector-Error}}}&amp;quot;, &amp;quot;{{{connectorRight}}}&amp;quot;, &amp;quot;{{{connectorBottom}}}&amp;quot;); &amp;#xA;                 &amp;#xA;    $DocumentID = {{{DocumentID}}}; &amp;#xA;    $SheetName  = {{{SheetName}}};&amp;#xA;    $Range      = {{{Range}}};&amp;#xA;    &amp;#xA;        {{{Result}}} = &amp;quot;&amp;quot;;&amp;#xA;        &amp;#xA;        if($null -eq $script:__GoogleSheetsID) { $script:__GoogleSheetsID = @{}; }  &amp;#xA;        $SheetsService = $null;        &amp;#xA;        if($script:__GoogleSheetsID.ContainsKey($DocumentID)) { $SheetsService = $script:__GoogleSheetsID[$DocumentID]; }&amp;#xA;        if($null -eq $SheetsService)&amp;#xA;        {&amp;#xA;            $SheetsService = [NamespaceGoogle.ClassGoogleSheets]::Authorize();&amp;#xA;            if($null -eq $SheetsService)&amp;#xA;            {&amp;#xA;                $__Error.Exception(&amp;quot;ERRORCONST_ERRORAUTHGOOGLE&amp;quot;);&amp;#xA;                return;&amp;#xA;            }&amp;#xA;            $script:__GoogleSheetsID.Add($DocumentID, $SheetsService);&amp;#xA;        } &amp;#xA;        &amp;#xA;        if($SheetName.Length -ne 0)&amp;#xA;        {&amp;#xA;            $Range = &amp;quot;'&amp;quot;+ $SheetName +&amp;quot;'!&amp;quot; + $Range;&amp;#xA;        }&amp;#xA;&amp;#xA;        $request = $SheetsService.Spreadsheets.Values.Get($DocumentID, $Range);&amp;#xA;        $response = $request.Execute();&amp;#xA;        $values = $response.Values;&amp;#xA;        if($values -ne $null -and $values.Count -gt 0)&amp;#xA;        {&amp;#xA;            {{{Result}}} = $values[0][0];&amp;#xA;        }&amp;#xA;        &amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;        $__Error.ExceptionCatch($_);&amp;#xA;        return;&amp;#xA;    }                                                                                                                &amp;#xA;    $__Error.Quit();&amp;#xA;}                   &amp;#xA;                " TextColor="#FF000000" ProtoName="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF006838&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF006838&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="8"&gt;&lt;Property Name="DocumentID" Tooltip="[Текст] ID документа. Данный идентификатор получается из ссылки на таблицу. Например: если у нас ссылка &amp;quot;https://docs.google.com/spreadsheets/d/1Y9k3CK7kdJvEjeIW4ROqsfVm9yu08u2vweRPWoV8wqg/edit#gid=0&amp;quot;, то id документа будет &amp;quot;1Y9k3CK7kdJvEjeIW4ROqsfVm9yu08u2vweRPWoV8wqg&amp;quot;" CatalogName="Required" Type="Expression" Value="$DocumentID" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="{x:Null}" Caption="ID документа" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="SheetName" Tooltip="[Текст] Имя листа, с которым происходит работа. Если значение оставить пустым, то используется лист по умолчанию" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="" Caption="Имя листа" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Range" Tooltip="[Текст] Имя ячейки. Например: &amp;quot;A1&amp;quot;" CatalogName="Required" Type="Expression" Value="&amp;quot;A1&amp;quot;" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="{x:Null}" Caption="Имя ячейки" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="Result" Tooltip="[Текст] Значение ячейки" CatalogName="Output" Type="Variable" Value="$Result" Visible="True" DefaultValue="" ValueType="Text" EnumVariants="{x:Null}" Caption="Результат" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorMessage" Tooltip="[Текст] Возвращает подробную информацию об ошибке в случае некорректного выполнения работы блока" CatalogName="Error processing" Type="Variable" Value="$ErrorMessage" Visible="True" DefaultValue="" ValueType="" EnumVariants="" Caption="Текст ошибки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Error" Orientation="Right" RelativePosition="1,0.5" MaxInConnections="0" MaxOutConnections="1" Color="#FFFF0000" Caption="Если ошибка" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>115</Left>
      <Top>460</Top>
      <Width>200</Width>
      <Height>75</Height>
      <ID>fe707297-640e-4c18-a032-fc4c59850f03</ID>
      <zIndex>10</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Записать значение в ячейку" InternalName="SetGoogleSheetsCellValue" FriendlyName="Записать значение в ячейку Google Таблицы" Width="200" Height="75" PathToImage="ExternalToolboxes\Image\google-sheets 1.png" PathToToolboxImage="{x:Null}" ImageType="LeftImage" NoDelete="False" Invisible="False" Proportional="True" Version="60" Code="&amp;#xA;function SetGoogleSheetsCellValue{{{block_id}}}&amp;#xA;{&amp;#xA; try&amp;#xA; {&amp;#xA;    {AddTypesGoogleSheets}&amp;#xA;    &amp;#xA;    $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;);&amp;#xA;    $__Error.AddConnectors(&amp;quot;{{{connector-Error}}}&amp;quot;, &amp;quot;{{{connectorRight}}}&amp;quot;, &amp;quot;{{{connectorBottom}}}&amp;quot;); &amp;#xA;                 &amp;#xA;    $DocumentID = {{{DocumentID}}};  &amp;#xA;    $SheetName  = {{{SheetName}}};&amp;#xA;    $Range      = {{{Range}}};&amp;#xA;    $Value      = {{{Value}}};   &amp;#xA;    $TypeValue  = &amp;quot;{{{TypeValue}}}&amp;quot;;&amp;#xA;    $TypeWrite  = &amp;quot;{{{TypeWrite}}}&amp;quot;;&amp;#xA;    &amp;#xA;        if($null -eq $script:__GoogleSheetsID) { $script:__GoogleSheetsID = @{}; }  &amp;#xA;        $SheetsService = $null;        &amp;#xA;        if($script:__GoogleSheetsID.ContainsKey($DocumentID)) { $SheetsService = $script:__GoogleSheetsID[$DocumentID]; }&amp;#xA;        if($null -eq $SheetsService)&amp;#xA;        {&amp;#xA;            $SheetsService = [NamespaceGoogle.ClassGoogleSheets]::Authorize();&amp;#xA;            if($null -eq $SheetsService)&amp;#xA;            {&amp;#xA;                $__Error.Exception(&amp;quot;ERRORCONST_ERRORAUTHGOOGLE&amp;quot;);&amp;#xA;                return;&amp;#xA;            }&amp;#xA;            $script:__GoogleSheetsID.Add($DocumentID, $SheetsService);&amp;#xA;        }&amp;#xA;           &amp;#xA;        $valueInputOption = 1;&amp;#xA;        $value_str = [string]$Value;&amp;#xA;        if($TypeWrite -eq &amp;quot;Raw&amp;quot;)&amp;#xA;        {&amp;#xA;            if($TypeValue -eq &amp;quot;Number&amp;quot;)&amp;#xA;            {&amp;#xA;                $writeValue = [float]::Parse($value_str.Replace(&amp;quot;,&amp;quot;, &amp;quot;.&amp;quot;), [CultureInfo]::InvariantCulture);&amp;#xA;            }&amp;#xA;            elseif($TypeValue -eq &amp;quot;Money&amp;quot;)&amp;#xA;            {                                     &amp;#xA;                $valmoney   = [decimal]::Parse($value_str.Replace(&amp;quot;,&amp;quot;, &amp;quot;.&amp;quot;), [CultureInfo]::InvariantCulture);&amp;#xA;                $writeValue = [decimal][Math]::Round($valmoney, 2);&amp;#xA;            } &amp;#xA;            else &amp;#xA;            {&amp;#xA;                $writeValue = $value_str;&amp;#xA;            }  &amp;#xA;            &amp;#xA;            if($writeValue.GetType().Name -eq &amp;quot;String&amp;quot;)&amp;#xA;            {&amp;#xA;                if($writeValue.Length -gt 0)&amp;#xA;                {&amp;#xA;                    if($writeValue[0] -eq &amp;quot;=&amp;quot;) &amp;#xA;                    { $valueInputOption = 2; }&amp;#xA;                }    &amp;#xA;            }&amp;#xA;        }&amp;#xA;        else&amp;#xA;        {&amp;#xA;            $writeValue = $Value;&amp;#xA;            $valueInputOption = 2;&amp;#xA;        } &amp;#xA;        &amp;#xA;        #count rows&amp;#xA;        $body        = [NamespaceGoogle.ClassGoogleSheets]::GetValueRange(1);  &amp;#xA;        $body.Values[0].Add($writeValue);&amp;#xA;               &amp;#xA;        if($SheetName.Length -ne 0)&amp;#xA;        {&amp;#xA;            $Range = &amp;quot;'&amp;quot;+ $SheetName +&amp;quot;'!&amp;quot; + $Range;&amp;#xA;        }&amp;#xA;        &amp;#xA;        $update = $SheetsService.Spreadsheets.Values.Update($body, $DocumentID, $Range);&amp;#xA;        $update.ValueInputOption = $valueInputOption;&amp;#xA;        $_ = $update.Execute();&amp;#xA;        &amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;        $__Error.ExceptionCatch($_);&amp;#xA;        return;&amp;#xA;    }                                                                                                                &amp;#xA;    $__Error.Quit();&amp;#xA;}                   &amp;#xA;                " TextColor="#FF000000" ProtoName="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF006838&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF006838&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="16"&gt;&lt;Property Name="DocumentID" Tooltip="[Текст] ID документа. Данный идентификатор получается из ссылки на таблицу. Например: если у нас ссылка &amp;quot;https://docs.google.com/spreadsheets/d/1Y9k3CK7kdJvEjeIW4ROqsfVm9yu08u2vweRPWoV8wqg/edit#gid=0&amp;quot;, то id документа будет &amp;quot;1Y9k3CK7kdJvEjeIW4ROqsfVm9yu08u2vweRPWoV8wqg&amp;quot;" CatalogName="Required" Type="Expression" Value="$DocumentID" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="{x:Null}" Caption="ID документа" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="SheetName" Tooltip="[Текст] Имя листа, с которым происходит работа. Если значение оставить пустым, то используется лист по умолчанию" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="" Caption="Имя листа" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Range" Tooltip="[Текст] Имя ячейки. Например: &amp;quot;A1&amp;quot;" CatalogName="Required" Type="Expression" Value="&amp;quot;A2&amp;quot;" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="{x:Null}" Caption="Имя ячейки" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="Value" Tooltip="[Текст] Значение ячейки" CatalogName="Required" Type="Expression" Value="$Result+$Result" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="{x:Null}" Caption="Значение" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="TypeValue" Tooltip="Тип записываемого значения. Возможные варианты: Text - значение запсиывается как текст; Number - значение записывается как число; Money - значение записывается как денежный тип (происходит округление до 2 знака после запятой)" CatalogName="Main properties" Type="Enum" Value="Text" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="Text;Number;Money" Caption="Тип значения" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="TypeWrite" Tooltip="Тип записи. Возможные значения: Raw - тип значения будет зависеть от свойства &amp;quot;Тип значения&amp;quot;; UserEntered - тип значения определяется автоматически" CatalogName="Main properties" Type="Enum" Value="Raw" Visible="True" DefaultValue="" ValueType="{x:Null}" EnumVariants="Raw;UserEntered" Caption="Тип записи" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorMessage" Tooltip="[Текст] Возвращает подробную информацию об ошибке в случае некорректного выполнения работы блока" CatalogName="Error processing" Type="Variable" Value="$ErrorMessage" Visible="True" DefaultValue="" ValueType="" EnumVariants="" Caption="Текст ошибки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Error" Orientation="Right" RelativePosition="1,0.5" MaxInConnections="0" MaxOutConnections="1" Color="#FFFF0000" Caption="Если ошибка" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>180</Left>
      <Top>870</Top>
      <Width>70</Width>
      <Height>70</Height>
      <ID>92011e98-b748-4e39-ae2c-2ce4cc7db853</ID>
      <zIndex>7</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Конец" InternalName="ReturnOrStop" FriendlyName="Блок обозначает завершение работы сценария или возврат из диаграммы подпроцесса в основной процесс. В диаграмме можно использовать более одного блока Конец. В диаграмме подпроцесса должен быть хотя бы один такой блок, иначе после завершения работы подпроцесса не произойдёт возврат в основной процесс." Width="70" Height="70" PathToImage="ExternalToolboxes\Image\ico_Process Stop.png" PathToToolboxImage="ExternalToolboxes\Image\icotb_Process Stop.png" ImageType="OnlyImage" NoDelete="False" Invisible="False" Proportional="True" Version="113" Code="&amp;#xA;function ReturnOrStop{{{block_id}}}&amp;#xA;{       &amp;#xA;    try&amp;#xA;    {&amp;#xA;    $currentblockid = &amp;quot;{{{block_native_id}}}&amp;quot;;&amp;#xA;       &amp;#xA;        $Value        = {{{Value}}};&amp;#xA;        $SendOrkest   = ${{{SendOrkest}}};&amp;#xA;        $IsScreenshot = ${{{IsScreenshot}}};&amp;#xA;        &amp;#xA;        $ValueStr = VarToString($Value); &amp;#xA;             &amp;#xA;        $val = _shield $ValueStr;&amp;#xA;        if($SendOrkest -or $IsScreenshot)&amp;#xA;        {                      &amp;#xA;            if($val.Length -eq 0)&amp;#xA;            {&amp;#xA;                $val = &amp;quot;Screenshot &amp;quot;+[DateTime]::Now.ToString();&amp;#xA;            }&amp;#xA;            Write-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;SendLogOrkest&amp;lt;/InternalName&amp;gt;&amp;lt;UITextValue&amp;gt;$val&amp;lt;/UITextValue&amp;gt;&amp;lt;UITextType&amp;gt;Info&amp;lt;/UITextType&amp;gt;&amp;lt;IsScreenshot&amp;gt;{{{IsScreenshot}}}&amp;lt;/IsScreenshot&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;        if($val.Length -gt 0)&amp;#xA;        {&amp;#xA;            $xmlvar = &amp;quot;&amp;quot;;&amp;#xA;            try&amp;#xA;            {&amp;#xA;                $xmlvar = $script:__BinFormatter.vartoxmlraw($Value);&amp;#xA;            }&amp;#xA;            catch{} &amp;#xA;            Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;Log&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$val&amp;lt;/InternalValue&amp;gt;$xmlvar&amp;lt;/info&amp;gt;&amp;quot;);&amp;#xA;        }&amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;    }&amp;#xA;    &amp;#xA;    try&amp;#xA;    {&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable1}}} = {{{Expression1}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable1: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable2}}} = {{{Expression2}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable2: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable3}}} = {{{Expression3}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable3: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable4}}} = {{{Expression4}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable4: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;            try&amp;#xA;            {         &amp;#xA;                {{{Variable5}}} = {{{Expression5}}};&amp;#xA;            }&amp;#xA;            catch { $errormessage = &amp;quot;Variable5: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression6}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression6: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression7}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression7: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression8}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression8: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression9}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression9: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA;        try&amp;#xA;        {         &amp;#xA;            {{{Expression10}}}&amp;#xA;        }&amp;#xA;        catch { $errormessage = &amp;quot;Expression10: &amp;quot; + $_.Exception.Message; Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlockLight&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormessage&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;); }&amp;#xA; &amp;#xA;    }&amp;#xA;    catch {}&amp;#xA;    &amp;#xA;    $__Error.Quit(); &amp;#xA;    try&amp;#xA;    {    &amp;#xA;        $script:__NextBlockID = &amp;quot;&amp;quot;;&amp;#xA;        $ProcessContainer = &amp;quot;&amp;quot;; &amp;#xA;        if ($script:__callstack.Count -gt 0)&amp;#xA;        {&amp;#xA;            $stackitem = $script:__callstack.Pop();&amp;#xA;            $script:__NextBlockID = $stackitem.ConnectorNext;&amp;#xA;            $ProcessContainer = $stackitem.ProcessContainer;&amp;#xA;            while($script:__NextBlockID.Length -eq 0)&amp;#xA;            {       &amp;#xA;                if ($script:__callstack.Count -eq 0) { break; } &amp;#xA;                $containerName = $stackitem.ProcessContainer;&amp;#xA;                if($containerName.StartsWith(&amp;quot;TryCatchContainer&amp;quot;) -or $containerName.StartsWith(&amp;quot;CollapseContainer&amp;quot;))&amp;#xA;                {&amp;#xA;                    $__Error.Quit();&amp;#xA;                    $stackitem = $script:__callstack.Pop();&amp;#xA;                    $script:__NextBlockID = $stackitem.ConnectorNext;  &amp;#xA;                    $ProcessContainer = $stackitem.ProcessContainer;&amp;#xA;                }&amp;#xA;                else&amp;#xA;                {&amp;#xA;                    break;&amp;#xA;                }&amp;#xA;            } &amp;#xA;                       &amp;#xA;            if($script:__RobotFileVersion -eq &amp;quot;125&amp;quot;)&amp;#xA;            {        &amp;#xA;                if($ProcessContainer.StartsWith(&amp;quot;TryCatchContainer&amp;quot;) -or $ProcessContainer.StartsWith(&amp;quot;CollapseContainer&amp;quot;))&amp;#xA;                {&amp;#xA;                &amp;#xA;                }&amp;#xA;                else&amp;#xA;                {&amp;#xA;                    try&amp;#xA;                    { &amp;#xA;                        $callOut = $ProcessContainer + &amp;quot;Out&amp;quot;; &amp;amp;$callOut;&amp;#xA;                    }&amp;#xA;                    catch&amp;#xA;                    {       &amp;#xA;                        $guidstr        = $ProcessContainer.Substring($ProcessContainer.Length - 32);&amp;#xA;                        $currentblockid = [Guid]::Parse($guidstr).ToString();  &amp;#xA;                        $errormes       = &amp;quot;Error in output parameters: &amp;quot; + $_.Exception.Message;  &amp;#xA;                        try {&amp;#xA;                            $othermsg = $_.InvocationInfo.Line.Trim();&amp;#xA;                            if(-not $othermsg.StartsWith(&amp;quot;throw&amp;quot;)) {&amp;#xA;                                $errormes += &amp;quot; : &amp;quot; + $othermsg; &amp;#xA;                            }&amp;#xA;                        }&amp;#xA;                        catch { }&amp;#xA;                        Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;$currentblockid&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ErrorBlock&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$errormes&amp;lt;/InternalValue&amp;gt;&amp;lt;/info&amp;gt;&amp;quot;);&amp;#xA;                        $script:__ScriptAborted = $true;&amp;#xA;                        $script:__NextBlockID = &amp;quot;&amp;quot;;   &amp;#xA;                        $script:__LastBlockID = $currentblockid;&amp;#xA;                        return;&amp;#xA;                    }&amp;#xA;                }                        &amp;#xA;            }&amp;#xA;        } &amp;#xA;    }&amp;#xA;    catch{} &amp;#xA;    $script:__LastBlockID = &amp;quot;{{{block_native_id}}}&amp;quot;;&amp;#xA;}               &amp;#xA;                " TextColor="#FF000000" ProtoName="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M75,50C75,63.8071187457698 63.8071187457698,75 50,75 36.1928812542302,75 25,63.8071187457698 25,50 25,36.1928812542302 36.1928812542302,25 50,25 63.8071187457698,25 75,36.1928812542302 75,50z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="32"&gt;&lt;Property Name="Value" Tooltip="[Любой тип данных] Числовая, текстовая константа (в кавычках), имя переменной (начинающееся с $) или любое выражение, значение которого будет выведено в лог в процессе работы сценария робота. Значение может в том числе иметь сложный тип данных, например Список, Таблица или Словарь." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Записать в лог" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable1" Tooltip="[Переменная] Имя первой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression1" Tooltip="[Любой тип данных] Новое значение первой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable2" Tooltip="[Переменная] Имя второй переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression2" Tooltip="[Любой тип данных] Новое значение второй переменной. Свойство игнорируется, если не задано имя второй переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable3" Tooltip="[Переменная] Имя третьей переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression3" Tooltip="[Любой тип данных] Новое значение третьей переменной. Свойство игнорируется, если не задано имя третьей переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable4" Tooltip="[Переменная] Имя четвертой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression4" Tooltip="[Любой тип данных] Новое значение четвертой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Variable5" Tooltip="[Переменная] Имя пятой переменной, которой необходимо присвоить новое значение. Можно выбрать из выпадающего списка переменную, которая была ранее объявлена в панели Переменные, а также ввести имя новой или использовавшейся ранее в другом блоке переменной, даже если она не была объявлена в панели Переменные." CatalogName="Main properties" Type="Variable" Value="" Visible="True" DefaultValue="" ValueType="Variable" EnumVariants="{x:Null}" Caption="Переменная 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression5" Tooltip="[Любой тип данных] Новое значение пятой переменной. Свойство игнорируется, если не задано имя первой переменной. Новое значение переменной может быть как константой (числом, текстовой строкой), так и выражением с использованием других переменных и/или функций. В новом значении переменной разрешено использовать выражение с участием этой же переменной. Не забудьте, что здесь и в других блоках используемые в выражениях названия переменных должны начинаться с символа $, а строковые константы должны заключаться в кавычки." CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression6" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 1" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression7" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 2" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression8" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 3" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression9" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 4" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Expression10" Tooltip="[Выражение] Выражение, которое необходимо выполнить. Должно быть записано в формате языка PowerShell" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Выражение 5" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="SendOrkest" Tooltip="Если выбрано, то текст будет также логироваться в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Логировать в оркестратор" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="IsScreenshot" Tooltip="Если выбрано, то будет создан скриншот экрана и отправлен в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Скриншот в оркестратор" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>490</Left>
      <Top>25</Top>
      <Width>323.99999999999994</Width>
      <Height>100</Height>
      <ID>17925df4-fb40-4da5-8a94-ddf071f8ea48</ID>
      <zIndex>0</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Пример показывает работу с таблицами Google. Необходимые данные: ID документа" InternalName="Comment" FriendlyName="Блок позволяет разместить в диаграмме любой текстовый комментарий. Блок не является частью сценария" Width="200" Height="75" PathToImage="" PathToToolboxImage="{x:Null}" ImageType="NoImage" NoDelete="False" Invisible="False" Proportional="False" Version="21" Code="&amp;#xA;function Comment{{{block_id}}}&amp;#xA;{&amp;#xA;&amp;#xA;    $script:__NextBlockID = &amp;quot;{{{connector-Next}}}&amp;quot;;&amp;#xA;}&amp;#xA;" TextColor="#FF000000" ProtoName="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFA8&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFA8&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="0" /&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="0" /&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>165</Left>
      <Top>310</Top>
      <Width>100</Width>
      <Height>100</Height>
      <ID>020748a3-1d2c-4add-999a-d8def04a6806</ID>
      <zIndex>6</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Log" InternalName="Log" FriendlyName="Позволяет выводить в лог произвольные сообщения и/или значения переменных в процессе работы сценария робота. Сообщения будут доступны для просмотра в панели Лог программы-дизайнера, а также в текстовых файлах логов программы-робота." Width="100" Height="100" PathToImage="ExternalToolboxes\Image\ico_Log.png" PathToToolboxImage="{x:Null}" ImageType="TopImage" NoDelete="False" Invisible="False" Proportional="True" Version="163" Code="&amp;#xA;function Log{{{block_id}}}&amp;#xA;{   &amp;#xA;    try&amp;#xA;    {&amp;#xA;        $Value          = {{{Value}}};&amp;#xA;        $ShowStatus     = ${{{ShowStatus}}};&amp;#xA;        $SendOrkest     = ${{{SendOrkest}}};&amp;#xA;        $IsScreenshot   = ${{{IsScreenshot}}};&amp;#xA;        $MakeScreenshot = ${{{MakeScreenshot}}};&amp;#xA;    &amp;#xA;        $ValueStr = VarToString($Value); &amp;#xA;         &amp;#xA;        $val = _shield $ValueStr;&amp;#xA;        if($ShowStatus)&amp;#xA;        {       &amp;#xA;            Write-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ShowStatus&amp;lt;/InternalName&amp;gt;&amp;lt;UITextValue&amp;gt;$val&amp;lt;/UITextValue&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;        &amp;#xA;        if($SendOrkest -or $IsScreenshot)&amp;#xA;        {                      &amp;#xA;            if($val.Length -eq 0)&amp;#xA;            {&amp;#xA;                $val = &amp;quot;Screenshot &amp;quot;+[DateTime]::Now.ToString();&amp;#xA;            }&amp;#xA;            Write-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;SendLogOrkest&amp;lt;/InternalName&amp;gt;&amp;lt;UITextValue&amp;gt;$val&amp;lt;/UITextValue&amp;gt;&amp;lt;UITextType&amp;gt;{{{Level}}}&amp;lt;/UITextType&amp;gt;&amp;lt;IsScreenshot&amp;gt;{{{IsScreenshot}}}&amp;lt;/IsScreenshot&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;        &amp;#xA;        $xmlvar = &amp;quot;&amp;quot;;&amp;#xA;        try&amp;#xA;        {&amp;#xA;            $xmlvar = $script:__BinFormatter.vartoxmlraw($Value);&amp;#xA;        }&amp;#xA;        catch{} &amp;#xA;        Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;Log&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$val&amp;lt;/InternalValue&amp;gt;$xmlvar&amp;lt;/info&amp;gt;&amp;quot;);&amp;#xA;        if($MakeScreenshot)&amp;#xA;        {&amp;#xA;            $psresultstr = Read-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;MakeScreenshot&amp;lt;/InternalName&amp;gt;&amp;lt;ProcessID&amp;gt;&amp;lt;/ProcessID&amp;gt;&amp;lt;ScreenshotToLog&amp;gt;True&amp;lt;/ScreenshotToLog&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;    }  &amp;#xA;    $script:__LastBlockID = &amp;quot;{{{block_native_id}}}&amp;quot;;&amp;#xA;    $script:__NextBlockID = &amp;quot;{{{connector-Next}}}&amp;quot;;&amp;#xA;}                   &amp;#xA;                " TextColor="#FF000000" ProtoName="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="8"&gt;&lt;Property Name="Value" Tooltip="[Любой тип данных] Числовая, текстовая константа (в кавычках), имя переменной (начинающееся с $) или любое выражение, значение которого будет выведено в лог в процессе работы сценария робота. Значение может в том числе иметь сложный тип данных, например Список, Таблица или Словарь." CatalogName="Main properties" Type="Expression" Value="&amp;quot;A1=&amp;quot;+$Result" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="MakeScreenshot" Tooltip="Создает скриншот и сохраняет его в папке с логами" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Сделать скриншот" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="SendOrkest" Tooltip="Если выбрано, то текст будет также логироваться в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Оркестратор. Логировать" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="IsScreenshot" Tooltip="Если выбрано, то будет создан скриншот экрана и отправлен в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Оркестратор. Скриншот" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Level" Tooltip="Уровень сообщения при отправке лога в оркестратор" CatalogName="Main properties" Type="Enum" Value="Info" Visible="True" DefaultValue="" ValueType="" EnumVariants="Info;Critical;Error;Warning;Debug" Caption="Оркестратор. Уровень" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ShowStatus" Tooltip="Если выбрано, то текст будет также выводиться в статусе, в верхней части экрана" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Отображать в статусе" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>115</Left>
      <Top>590</Top>
      <Width>200</Width>
      <Height>75</Height>
      <ID>cf1c38d3-c5f9-4209-8246-71bff215c204</ID>
      <zIndex>13</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Получить значение ячейки" InternalName="GetGoogleSheetsCellValue" FriendlyName="Считать значение ячейки из Google Таблицы" Width="200" Height="75" PathToImage="ExternalToolboxes\Image\google-sheets 1.png" PathToToolboxImage="{x:Null}" ImageType="LeftImage" NoDelete="False" Invisible="False" Proportional="True" Version="35" Code="&amp;#xA;function GetGoogleSheetsCellValue{{{block_id}}}&amp;#xA;{&amp;#xA; try&amp;#xA; {&amp;#xA;    {AddTypesGoogleSheets}&amp;#xA;    &amp;#xA;    $__Error.Enter(&amp;quot;{{{block_native_id}}}&amp;quot;, &amp;quot;{{{ErrorLevel}}}&amp;quot;,&amp;quot;{{{ErrorDirection}}}&amp;quot;,&amp;quot;{{{ReportLevel}}}&amp;quot;,&amp;quot;{{{ErrorMessage}}}&amp;quot;);&amp;#xA;    $__Error.AddConnectors(&amp;quot;{{{connector-Error}}}&amp;quot;, &amp;quot;{{{connectorRight}}}&amp;quot;, &amp;quot;{{{connectorBottom}}}&amp;quot;); &amp;#xA;                 &amp;#xA;    $DocumentID = {{{DocumentID}}}; &amp;#xA;    $SheetName  = {{{SheetName}}};&amp;#xA;    $Range      = {{{Range}}};&amp;#xA;    &amp;#xA;        {{{Result}}} = &amp;quot;&amp;quot;;&amp;#xA;        &amp;#xA;        if($null -eq $script:__GoogleSheetsID) { $script:__GoogleSheetsID = @{}; }  &amp;#xA;        $SheetsService = $null;        &amp;#xA;        if($script:__GoogleSheetsID.ContainsKey($DocumentID)) { $SheetsService = $script:__GoogleSheetsID[$DocumentID]; }&amp;#xA;        if($null -eq $SheetsService)&amp;#xA;        {&amp;#xA;            $SheetsService = [NamespaceGoogle.ClassGoogleSheets]::Authorize();&amp;#xA;            if($null -eq $SheetsService)&amp;#xA;            {&amp;#xA;                $__Error.Exception(&amp;quot;ERRORCONST_ERRORAUTHGOOGLE&amp;quot;);&amp;#xA;                return;&amp;#xA;            }&amp;#xA;            $script:__GoogleSheetsID.Add($DocumentID, $SheetsService);&amp;#xA;        } &amp;#xA;        &amp;#xA;        if($SheetName.Length -ne 0)&amp;#xA;        {&amp;#xA;            $Range = &amp;quot;'&amp;quot;+ $SheetName +&amp;quot;'!&amp;quot; + $Range;&amp;#xA;        }&amp;#xA;&amp;#xA;        $request = $SheetsService.Spreadsheets.Values.Get($DocumentID, $Range);&amp;#xA;        $response = $request.Execute();&amp;#xA;        $values = $response.Values;&amp;#xA;        if($values -ne $null -and $values.Count -gt 0)&amp;#xA;        {&amp;#xA;            {{{Result}}} = $values[0][0];&amp;#xA;        }&amp;#xA;        &amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;        $__Error.ExceptionCatch($_);&amp;#xA;        return;&amp;#xA;    }                                                                                                                &amp;#xA;    $__Error.Quit();&amp;#xA;}                   &amp;#xA;                " TextColor="#FF000000" ProtoName="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF006838&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF006838&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="8"&gt;&lt;Property Name="DocumentID" Tooltip="[Текст] ID документа. Данный идентификатор получается из ссылки на таблицу. Например: если у нас ссылка &amp;quot;https://docs.google.com/spreadsheets/d/1Y9k3CK7kdJvEjeIW4ROqsfVm9yu08u2vweRPWoV8wqg/edit#gid=0&amp;quot;, то id документа будет &amp;quot;1Y9k3CK7kdJvEjeIW4ROqsfVm9yu08u2vweRPWoV8wqg&amp;quot;" CatalogName="Required" Type="Expression" Value="$DocumentID" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="{x:Null}" Caption="ID документа" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="SheetName" Tooltip="[Текст] Имя листа, с которым происходит работа. Если значение оставить пустым, то используется лист по умолчанию" CatalogName="Main properties" Type="Expression" Value="" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="" Caption="Имя листа" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Range" Tooltip="[Текст] Имя ячейки. Например: &amp;quot;A1&amp;quot;" CatalogName="Required" Type="Expression" Value="&amp;quot;A2&amp;quot;" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Text" EnumVariants="{x:Null}" Caption="Имя ячейки" ProtoName="" ReadOnly="False" IsRequired="True" IsPSVerified="True" /&gt;&lt;Property Name="Result" Tooltip="[Текст] Значение ячейки" CatalogName="Output" Type="Variable" Value="$Result" Visible="True" DefaultValue="" ValueType="Text" EnumVariants="{x:Null}" Caption="Результат" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorLevel" Tooltip="Выбор уровня обработки ошибок. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Ignore&amp;quot; - ошибки игнорируются; &amp;quot;Handle&amp;quot; - ошибки обрабатываются. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Ignore;Handle" Caption="Уровень обработки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ReportLevel" Tooltip="Выбор уровня сообщений, которые будут выводить блоки при работе. Возможные значения: &amp;quot;Default&amp;quot; - по умолчанию; &amp;quot;Release&amp;quot; - вывод отключен; &amp;quot;Debug&amp;quot; - вывод основной информации; &amp;quot;Detailed&amp;quot; - вывод подробной информации. Если выбрано значение &amp;quot;Default&amp;quot;, то будет использоваться значение блока &amp;quot;Старт&amp;quot; данной диаграммы" CatalogName="Error processing" Type="Enum" Value="Default" Visible="True" DefaultValue="" ValueType="" EnumVariants="Default;Release;Debug;Detailed;Output" Caption="Уровень сообщений" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ErrorMessage" Tooltip="[Текст] Возвращает подробную информацию об ошибке в случае некорректного выполнения работы блока" CatalogName="Error processing" Type="Variable" Value="$ErrorMessage" Visible="True" DefaultValue="" ValueType="" EnumVariants="" Caption="Текст ошибки" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Error" Orientation="Right" RelativePosition="1,0.5" MaxInConnections="0" MaxOutConnections="1" Color="#FFFF0000" Caption="Если ошибка" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
    <DesignerItem>
      <Left>165</Left>
      <Top>715</Top>
      <Width>100</Width>
      <Height>100</Height>
      <ID>d1eb7b12-4a0b-43f4-92b0-0ff9d64f9fef</ID>
      <zIndex>11</zIndex>
      <IsGroup>false</IsGroup>
      <IsEnabled>true</IsEnabled>
      <Description></Description>
      <IsPSVerified>true</IsPSVerified>
      <ParentID>00000000-0000-0000-0000-000000000000</ParentID>
      <StorageSelectors></StorageSelectors>
      <Content>&lt;ToolboxItemSettings DisplayName="Log" InternalName="Log" FriendlyName="Позволяет выводить в лог произвольные сообщения и/или значения переменных в процессе работы сценария робота. Сообщения будут доступны для просмотра в панели Лог программы-дизайнера, а также в текстовых файлах логов программы-робота." Width="100" Height="100" PathToImage="ExternalToolboxes\Image\ico_Log.png" PathToToolboxImage="{x:Null}" ImageType="TopImage" NoDelete="False" Invisible="False" Proportional="True" Version="163" Code="&amp;#xA;function Log{{{block_id}}}&amp;#xA;{   &amp;#xA;    try&amp;#xA;    {&amp;#xA;        $Value          = {{{Value}}};&amp;#xA;        $ShowStatus     = ${{{ShowStatus}}};&amp;#xA;        $SendOrkest     = ${{{SendOrkest}}};&amp;#xA;        $IsScreenshot   = ${{{IsScreenshot}}};&amp;#xA;        $MakeScreenshot = ${{{MakeScreenshot}}};&amp;#xA;    &amp;#xA;        $ValueStr = VarToString($Value); &amp;#xA;         &amp;#xA;        $val = _shield $ValueStr;&amp;#xA;        if($ShowStatus)&amp;#xA;        {       &amp;#xA;            Write-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;ShowStatus&amp;lt;/InternalName&amp;gt;&amp;lt;UITextValue&amp;gt;$val&amp;lt;/UITextValue&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;        &amp;#xA;        if($SendOrkest -or $IsScreenshot)&amp;#xA;        {                      &amp;#xA;            if($val.Length -eq 0)&amp;#xA;            {&amp;#xA;                $val = &amp;quot;Screenshot &amp;quot;+[DateTime]::Now.ToString();&amp;#xA;            }&amp;#xA;            Write-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;SendLogOrkest&amp;lt;/InternalName&amp;gt;&amp;lt;UITextValue&amp;gt;$val&amp;lt;/UITextValue&amp;gt;&amp;lt;UITextType&amp;gt;{{{Level}}}&amp;lt;/UITextType&amp;gt;&amp;lt;IsScreenshot&amp;gt;{{{IsScreenshot}}}&amp;lt;/IsScreenshot&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;        &amp;#xA;        $xmlvar = &amp;quot;&amp;quot;;&amp;#xA;        try&amp;#xA;        {&amp;#xA;            $xmlvar = $script:__BinFormatter.vartoxmlraw($Value);&amp;#xA;        }&amp;#xA;        catch{} &amp;#xA;        Write-Host(&amp;quot;&amp;lt;info&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;Log&amp;lt;/InternalName&amp;gt;&amp;lt;InternalValue&amp;gt;$val&amp;lt;/InternalValue&amp;gt;$xmlvar&amp;lt;/info&amp;gt;&amp;quot;);&amp;#xA;        if($MakeScreenshot)&amp;#xA;        {&amp;#xA;            $psresultstr = Read-Host(&amp;quot;&amp;lt;block&amp;gt;&amp;lt;ID&amp;gt;{{{block_native_id}}}&amp;lt;/ID&amp;gt;&amp;lt;InternalName&amp;gt;MakeScreenshot&amp;lt;/InternalName&amp;gt;&amp;lt;ProcessID&amp;gt;&amp;lt;/ProcessID&amp;gt;&amp;lt;ScreenshotToLog&amp;gt;True&amp;lt;/ScreenshotToLog&amp;gt;&amp;lt;/block&amp;gt;&amp;quot;); &amp;#xA;        }&amp;#xA;    }&amp;#xA;    catch &amp;#xA;    { &amp;#xA;    }  &amp;#xA;    $script:__LastBlockID = &amp;quot;{{{block_native_id}}}&amp;quot;;&amp;#xA;    $script:__NextBlockID = &amp;quot;{{{connector-Next}}}&amp;quot;;&amp;#xA;}                   &amp;#xA;                " TextColor="#FF000000" ProtoName="" UrlVideo="{x:Null}" DerivedFrom="" NoResize="False" Container="False" MouseOverColor="Gray" MouseOverFill="Transparent" IsExpressionOnPause="False" ExpressionOnPause="" IsCollapsedBlock="False" Breakpoint="False" DirivedFrom="" xmlns="clr-namespace:ToolboxDesigner.Core;assembly=DiagramDesigner" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;ToolboxItemSettings.PathStyle&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle&gt;&lt;ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.BasedOn&gt;&lt;av:Style TargetType="av:Path"&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FFFFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#FF41B1E1&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeThickness"&gt;&lt;av:Setter.Value&gt;&lt;s:Double&gt;2&lt;/s:Double&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.StrokeLineJoin"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:PenLineJoin.Round" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stretch"&gt;&lt;av:Setter.Value&gt;&lt;x:Static Member="av:Stretch.Fill" /&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;False&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:UIElement.SnapsToDevicePixels"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:Path.Data"&gt;&lt;av:Setter.Value&gt;&lt;av:StreamGeometry&gt;M0,0L80,0 80,20 0,20z&lt;/av:StreamGeometry&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/av:Style.BasedOn&gt;&lt;av:Style.Resources&gt;&lt;av:ResourceDictionary /&gt;&lt;/av:Style.Resources&gt;&lt;av:Setter Property="av:UIElement.IsHitTestVisible"&gt;&lt;av:Setter.Value&gt;&lt;s:Boolean&gt;True&lt;/s:Boolean&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Fill"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;av:Setter Property="av:Shape.Stroke"&gt;&lt;av:Setter.Value&gt;&lt;av:SolidColorBrush&gt;#00FFFFFF&lt;/av:SolidColorBrush&gt;&lt;/av:Setter.Value&gt;&lt;/av:Setter&gt;&lt;/av:Style&gt;&lt;/ToolboxItemSettings.PathStyle_DragThumb&gt;&lt;ToolboxItemSettings.Properties&gt;&lt;PropertiesCollection Capacity="8"&gt;&lt;Property Name="Value" Tooltip="[Любой тип данных] Числовая, текстовая константа (в кавычках), имя переменной (начинающееся с $) или любое выражение, значение которого будет выведено в лог в процессе работы сценария робота. Значение может в том числе иметь сложный тип данных, например Список, Таблица или Словарь." CatalogName="Main properties" Type="Expression" Value="&amp;quot;A2=&amp;quot;+$Result" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="Any data type" EnumVariants="{x:Null}" Caption="Значение" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="MakeScreenshot" Tooltip="Создает скриншот и сохраняет его в папке с логами" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Сделать скриншот" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="SendOrkest" Tooltip="Если выбрано, то текст будет также логироваться в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Оркестратор. Логировать" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="IsScreenshot" Tooltip="Если выбрано, то будет создан скриншот экрана и отправлен в оркестратор, если подключение к нему активно" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Оркестратор. Скриншот" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="Level" Tooltip="Уровень сообщения при отправке лога в оркестратор" CatalogName="Main properties" Type="Enum" Value="Info" Visible="True" DefaultValue="" ValueType="" EnumVariants="Info;Critical;Error;Warning;Debug" Caption="Оркестратор. Уровень" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;Property Name="ShowStatus" Tooltip="Если выбрано, то текст будет также выводиться в статусе, в верхней части экрана" CatalogName="Main properties" Type="Bool" Value="False" Visible="True" DefaultValue="&amp;quot;&amp;quot;" ValueType="" EnumVariants="" Caption="Отображать в статусе" ProtoName="" ReadOnly="False" IsRequired="False" IsPSVerified="True" /&gt;&lt;/PropertiesCollection&gt;&lt;/ToolboxItemSettings.Properties&gt;&lt;ToolboxItemSettings.ConnectorsSettings&gt;&lt;ConnectorsSettingsCollection Capacity="4"&gt;&lt;ConnectorSettings Name="Input" Orientation="Top" RelativePosition="0.5,0" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="InputLeft" Orientation="Left" RelativePosition="0,0.5" MaxInConnections="100" MaxOutConnections="0" Color="#FF000000" Caption="" /&gt;&lt;ConnectorSettings Name="Next" Orientation="Bottom" RelativePosition="0.5,1" MaxInConnections="0" MaxOutConnections="1" Color="#FF000000" Caption="" /&gt;&lt;/ConnectorsSettingsCollection&gt;&lt;/ToolboxItemSettings.ConnectorsSettings&gt;&lt;/ToolboxItemSettings&gt;</Content>
    </DesignerItem>
  </DesignerItems>
  <Connections>
    <Connection>
      <SourceID>1a09e16b-cca9-4626-a319-2030b116f4f5</SourceID>
      <SinkID>622abc5c-daf8-4926-a76e-06b91900f4ff</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>1</zIndex>
    </Connection>
    <Connection>
      <SourceID>020748a3-1d2c-4add-999a-d8def04a6806</SourceID>
      <SinkID>fe707297-640e-4c18-a032-fc4c59850f03</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>5</zIndex>
    </Connection>
    <Connection>
      <SourceID>fe707297-640e-4c18-a032-fc4c59850f03</SourceID>
      <SinkID>cf1c38d3-c5f9-4209-8246-71bff215c204</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>9</zIndex>
    </Connection>
    <Connection>
      <SourceID>622abc5c-daf8-4926-a76e-06b91900f4ff</SourceID>
      <SinkID>020748a3-1d2c-4add-999a-d8def04a6806</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>3</zIndex>
    </Connection>
    <Connection>
      <SourceID>cf1c38d3-c5f9-4209-8246-71bff215c204</SourceID>
      <SinkID>d1eb7b12-4a0b-43f4-92b0-0ff9d64f9fef</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>12</zIndex>
    </Connection>
    <Connection>
      <SourceID>d1eb7b12-4a0b-43f4-92b0-0ff9d64f9fef</SourceID>
      <SinkID>92011e98-b748-4e39-ae2c-2ce4cc7db853</SinkID>
      <SourceConnectorName>Next</SourceConnectorName>
      <SinkConnectorName>Input</SinkConnectorName>
      <SourceArrowSymbol>None</SourceArrowSymbol>
      <SinkArrowSymbol>Arrow</SinkArrowSymbol>
      <zIndex>8</zIndex>
    </Connection>
  </Connections>
  <Properties>
    <DiagramProperty Name="DocumentID" Type="Text" IsGlobal="True" DefaultValue="AAEAAAD/////AQAAAAAAAAAGAQAAACwxWTlrM0NLN2tkSnZFamVJVzRST3FzZlZtOXl1MDh1MnZ3ZVJQV29WOHdxZws=" Value="AAEAAAD/////AQAAAAAAAAAGAQAAAC4iMVk5azNDSzdrZEp2RWplSVc0Uk9xc2ZWbTl5dTA4dTJ2d2VSUFdvVjh3cWciCw==" />
  </Properties>
</Root>