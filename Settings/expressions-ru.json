{
  "Categories": [
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Вывод",
      "Elements": [
        {
          "Name": "$ErrorMessage",
          "Description": "Сообщение об ошибке"
        },
		{
          "Name": "$__RobotGuid",
          "Description": "GUID робота, заданный в настройках робота на вкладке \"Оркестратор\""
        },
		{
          "Name": "$__RobotVersion",
          "Description": "Версия робота"
        },
		{
          "Name": "$__RobotFullVersion",
          "Description": "Полная строка с версией робота"
        },
		{
          "Name": "$__ExceptionBlockID",
          "Description": "ID блока, в котором произошла ошибка"
        },
		{
          "Name": "$__JobGuid",
          "Description": "GUID работы, которую в данный момент выполняет робот"
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Константы и спецсимволы",
      "Elements": [
        {
          "Name": "10",
          "Description": "Числовая константа"
        },
        {
          "Name": "10.34",
          "Description": "Числовая дробная константа"
        },
        {
          "Name": "\"Текст\"",
          "Description": "Текстовая константа"
        },
        {
          "Name": "$True",
          "Description": "Логическая константа \"Истина\""
        },
        {
          "Name": "$False",
          "Description": "Логическая константа \"Ложь\""
        },
        {
          "Name": "`$",
          "Description": "Символ доллара. Можно использовать внутри текстовых констант. Пример \"Сумма `$200\""
        },
        {
          "Name": "`\"",
          "Description": "Кавычки. Можно использовать внутри текстовых констант. Пример \"Он сказал `\"Нет`\"\""
        },
        {
          "Name": "`n",
          "Description": "Символ новой строки. Можно использовать внутри текстовых констант. Пример \"Первая строка`nВторая строка\""
        },
        {
          "Name": "`r",
          "Description": "Возврат в начало строки. Можно использовать внутри текстовых констант. Пример \"Первая строка`rВторая строка\""
        },
        {
          "Name": "`t",
          "Description": "Горизонтальная табуляция. Можно использовать внутри текстовых констант. Пример \"Текст 1`tТекст 2\""
        },
		{
          "Name": "#StopRefactoring",
          "Description": "Запрещает роботу обрабатывать переменные после этой строки. Под обработкой понимается преобразование имен переменных с указанием класса"
        },
		{
          "Name": "#StartRefactoring",
          "Description": "Разрешает роботу обрабатывать переменные после этой строки. Под обработкой понимается преобразование имен переменных с указанием класса. Данное действие работает по умолчанию"
        },
      ]
    },
	{
      "Name": "-",
      "Elements": []
    },
	{
      "Name": "Полезные преобразования",
      "Elements": [
        {
          "Name": "$HtmlBody -Replace \"<.*?>\", \"\"",
          "Description": "Удаление из строки всех html тегов. Пример: чтобы удалить из тела электронного письма все теги можно воспользоваться таким матодом: $Mail.HtmlBody -Replace \"<.*?>\", \"\""
        },
		{
          "Name": "_tonumber($Value)",
          "Description": "Быстрое преобразование строки в тип Number (Double). При возникновении ошибки будет возвращен 0"
        },
		{
          "Name": "_tomoney($Value)",
          "Description": "Быстрое преобразование строки в тип Money (Decimal). При возникновении ошибки будет возвращен 0"
        },
		{
          "Name": "_tological($Value)",
          "Description": "Быстрое преобразование строки в тип Logical. При возникновении ошибки будет возвращен $false"
        },
{
          "Name": "_tobool($Value)",
          "Description": "Быстрое преобразование строки в тип Boolean. При возникновении ошибки будет возвращен $false"
        },
		{
          "Name": "_toint($Value)",
          "Description": "Быстрое преобразование строки в тип Int32. При возникновении ошибки будет возвращен 0"
        },
		{
          "Name": "_todouble($Value)",
          "Description": "Быстрое преобразование строки в тип Double (Number). При возникновении ошибки будет возвращен 0"
        },
		{
          "Name": "_todecimal($Value)",
          "Description": "Быстрое преобразование строки в тип Decimal (Money). При возникновении ошибки будет возвращен 0"
        },
		{
          "Name": "_tocell($Value)",
          "Description": "Быстрое преобразование числа в эквивалентное значение колонки Excel. Например число 7 будет преобразовано в G"
        },
		{
          "Name": "_fromcell($Value)",
          "Description": "Быстрое преобразование значения колонки Excel в эквивалентное число. Например значение G будет преобразовано в 7"
        },
		{
          "Name": "_isnull($Value)",
          "Description": "Проверяет значение на $null или DBNull"
        },
		{
          "Name": "_isempty($Value)",
          "Description": "Проверяет значение на $null или DBNull, а так же на пустое значение строки"
        }
      ]
    },
	{
      "Name": "-",
      "Elements": []
    },
	{
      "Name": "Работа с SecureString",
      "Elements": [
		{
          "Name": "_fromsecure($MySecureString)",
          "Description": "Извлекает значение из переменной типа SecureString. Тип возвращаемого значения [string]"
        },
		{
          "Name": "_tosecure($MyPassword)",
          "Description": "Оборачивает заданное текстовое значение в защищенную строку SecureString. Тип возвращаемого значения [System.Security.SecureString]"
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Математические функции",
      "Elements": [
        {
          "Name": "Abs(-5)",
          "Description": "Возвращает модуль числа. Параметром функции может быть числовая константа или переменная типа 'Число'. Пример Abs(-123) = 123"
        },
        {
          "Name": "Acos(0.7)",
          "Description": "Возвращает арккосинус. Параметром функции может быть числовая константа или переменная типа 'Число' со значением от -1 до 1"
        },
        {
          "Name": "Asin(0.7)",
          "Description": "Возвращает арксинус. Параметром функции может быть числовая константа или переменная типа 'Число' со значением от -1 до 1"
        },
        {
          "Name": "Atan(0.7)",
          "Description": "Возвращает арктангенс. Параметром функции может быть числовая константа или переменная типа 'Число' со значением от -1 до 1"
        },
        {
          "Name": "Atan2(2.0,1.0)",
          "Description": "Atan2(x, y) - Возвращает угол, тангенс которого равен отношению двух указанных чисел, где (x, y) — это точка в декартовой системе координат. Параметрами функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "BigMul(2147483647,2147483647)",
          "Description": "BigMul(x, y) - возвращает произведение x * y в виде объекта [long]. Параметрами функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Ceiling(2.34)",
          "Description": "Ceiling(value): возвращает наименьшее целое число с плавающей точкой, которое не меньше числа 'value'. Пример: Ceiling(2.34) => 3. Параметрами функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Cos(60)",
          "Description": "Возвращает косинус угла. Параметром функции может быть числовая константа или переменная типа 'Число' со значением от -1 до 1"
        },
        {
          "Name": "Cosh(0.7)",
          "Description": "Возвращает гиперболический косинус угла $value. Параметром функции может быть числовая константа или переменная типа 'Число' со значением от -1 до 1"
        },
        {
          "Name": "DivRem(10,3,[ref] $result)",
          "Description": "DivRem(a, b, result) - возвращает результат от деления a/b, а остаток помещается в переменную 'result'. Параметрами функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Equals(10,3)",
          "Description": "Equals(a, b) - возвращает $true, если два числа a и b равны, иначе $false. Параметрами функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Exp(3)",
          "Description": "Exp(value)возвращает основание натурального логарифма, возведенное в степень 'value'. Параметром функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Floor(6.78)",
          "Description": "Возвращает целую часть числа до запятой без округления. Параметром функции может быть числовая константа или переменная типа 'Число'. Пример Floor(6.78)=6"
        },
        {
          "Name": "IEEERemainder(10,3)",
          "Description": "IEEERemainder(a, b) - возвращает остаток от деления a на b. Параметрами функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Log(1.2)",
          "Description": "Log(value) - возвращает натуральный логарифм числа 'value'. Параметрами функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Log10(4)",
          "Description": "Log10(value) - возвращает десятичный логарифм числа value. Параметром функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Max(1,2)",
          "Description": "Возвращает максимальное значение из двух чисел. Параметром функции может быть числовая константа или переменная типа 'Число'. Пример Max(1,2)=2"
        },
        {
          "Name": "Min(1,2)",
          "Description": "Возвращает минимальное значение из двух чисел. Параметром функции может быть числовая константа или переменная типа 'Число'. Пример Min(1,2)=1"
        },
        {
          "Name": "Pow(2,3)",
          "Description": "Pow(a, b): возвращает число 'a', возведенное в степень 'b'. Параметрами функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Round(12.34,1)",
          "Description": "Округляет число. Параметром функции может быть числовая константа или переменная типа 'Число'. Round(<число>) - округляет число до ближайшего целого. Round(<число>, <кол-вознаков_после_запятой>) - округляет число до указанного количества знаков после запятой. Пример: Round(12.34) = 12; Round(12.34, 1) = 12,3"
        },
        {
          "Name": "Sign(2)",
          "Description": "Sign($value): возвращает число 1, если число 'value' положительное, и -1, если значение 'value' отрицательное. Если 'value' равно 0, то возвращает 0. Параметром функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Sin(45)",
          "Description": "Возвращает синус угла. Параметром функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Sinh(0.7)",
          "Description": "Возвращает гиперболический синус угла. Параметром функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Tan(45)",
          "Description": "Возвращает тангенс угла. Параметром функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Tanh(0.7)",
          "Description": "Возвращает гиперболический тангенс угла. Параметром функции могут быть числовые константы или переменные типа 'Число'"
        },
        {
          "Name": "Sqrt(9)",
          "Description": "Возвращает квадратный корень числа. Параметром функции может быть числовая константа или переменная типа 'Число'. Пример Sqrt(4)=2"
        },
        {
          "Name": "Truncate(3.7)",
          "Description": "Truncate(value) - отбрасывает дробную часть числа 'value', возвращаяя лишь целое значние. Параметром функции могут быть числовые константы или переменные типа 'Число'"
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Выражения",
      "Elements": [
        {
          "Name": "10+$a",
          "Description": "Пример сложения переменной и числа. Допустим переменная $a = 12, тогда выражение (10+$a) будет иметь значение 22."
        },
        {
          "Name": "$a*10-$b",
          "Description": "Пример использования переменных и чисел в выражении. Допустим переменная $a = 12 и $b = 5, тогда выражение ($a*10-$b) будет иметь значение 115."
        },
        {
          "Name": "$a-($b+5)",
          "Description": "Пример использования скобок. Допустим переменная $a = 12 и $b = 5, тогда выражение ($a-($b+5)) будет иметь значение 2."
        },
        {
          "Name": "$a+\"text\"",
          "Description": "Пример сложения переменной и строки. Допустим переменная $a = \"This \", тогда выражение ($a+\"text\") будет иметь значение \"This text\"."
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Логические операторы",
      "Elements": [		
        {
          "Name": "AND",
          "Description": "Логическое 'И'. Возвращает $True, если два условия истинны. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a==1) AND ($b > 4) будет иметь значение $True, а выражение ($a==1) AND ($b < 4) будет иметь значение $False."
        },
        {
          "Name": "OR",
          "Description": "Логическое 'ИЛИ'. Возвращает $True, если хотя бы одно условие истинна. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a==1) OR ($b > 4) будет иметь значение $True, а выражение ($a==1) AND ($b < 4) будет иметь значение $True."
        },
        {
          "Name": "XOR",
          "Description": "Исключающее 'ИЛИ'. Возвращает $True, если ТОЛЬКО ОДНО условие истинно. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a==1) XOR ($b > 4) будет иметь значение $False, а выражение ($a==1) AND ($b < 4) будет иметь значение $True."
        },
        {
          "Name": "NOT",
          "Description": "Логическое 'НЕ'. Инвертирует логическое состояние на противоположное. Пример: допустим переменная $a = 1, тогда выражение NOT ($a==1) будет иметь значение $False."
        },
        {
          "Name": "LIKE",
          "Description": "Проверяет, содержится ли строка в строковом значении. Оператор '*' - подставляет любое количество любых символов. Оператор '?' - подставляет только один любой символ. Пример: допустим переменная $a = 'John Smith', тогда выражение ($a LIKE 'John*') будет иметь значение $True."
        },
        {
          "Name": "MATCH",
          "Description": "Проверяет, содержится ли строка в строковом значении, используя регулярные выражения. Подробнее описано в разделе 'Регулярные выражения'"
        },
        {
          "Name": "CONTAINS",
          "Description": "Проверяет, содержит ли коллекция указанное значение. Пример: допустим переменная $list = @(1,2,3), тогда выражение ($list CONTAINS 2) будет иметь значение $True, а выражение ($list CONTAINS 10) будет иметь значение $False."
        },
        {
          "Name": "-IN",
          "Description": "Проверяет, входит ли проверяемое значение в коллекцию. Пример: допустим переменная $list = @(1,2,3), тогда выражение (5 -IN $list) будет иметь значение $False, а выражение (2 -IN $list) будет иметь значение $True."
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Операторы сравнения",
      "Elements": [
        {
          "Name": "==",
          "Description": "'Равенство'. Возвращает $True, если два числа равны. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a==$b) будет иметь значение $False, а выражение ($b==5) будет иметь значение $True."
        },
        {
          "Name": "!=",
          "Description": "'Неравенство'. Возвращает $True, если два числа не равны. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a!=$b) будет иметь значение $True, а выражение ($a!=1) будет иметь значение $False."
        },
        {
          "Name": ">=",
          "Description": "'Больше или равно'. Возвращает $True, если число слева больше или равно значению справа. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a>=$b) будет иметь значение $False, а выражение ($b>=3) будет иметь значение $True."
        },
        {
          "Name": "<=",
          "Description": "'Меньше или равно'. Возвращает $True, если число слева меньше или равно значению справа. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a<=$b) будет иметь значение $True, а выражение ($b<=10) будет иметь значение $True."
        },
        {
          "Name": ">",
          "Description": "'Больше'. Возвращает $True, если число слева больше значения справа. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a>$b) будет иметь значение $False, а выражение ($b>2) будет иметь значение $True."
        },
        {
          "Name": "<",
          "Description": "'Меньше'. Возвращает $True, если число слева меньше значения справа. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a<$b) будет иметь значение $True, а выражение ($b<10) будет иметь значение $False."
        },
		{
          "Name": "-eq",
          "Description": "'Равенство'. Возвращает $True, если два числа равны. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a -eq $b) будет иметь значение $False, а выражение ($b -eq 5) будет иметь значение $True."
        },
        {
          "Name": "-ne",
          "Description": "'Неравенство'. Возвращает $True, если два числа не равны. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a -ne $b) будет иметь значение $True, а выражение ($a -ne 1) будет иметь значение $False."
        },
        {
          "Name": "-ge",
          "Description": "'Больше или равно'. Возвращает $True, если число слева больше или равно значению справа. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a -ge $b) будет иметь значение $False, а выражение ($b -ge 3) будет иметь значение $True."
        },
        {
          "Name": "-le",
          "Description": "'Меньше или равно'. Возвращает $True, если число слева меньше или равно значению справа. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a -le $b) будет иметь значение $True, а выражение ($b -le 10) будет иметь значение $True."
        },
        {
          "Name": "-gt",
          "Description": "'Больше'. Возвращает $True, если число слева больше значения справа. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a -gt $b) будет иметь значение $False, а выражение ($b -gt 2) будет иметь значение $True."
        },
        {
          "Name": "-lt",
          "Description": "'Меньше'. Возвращает $True, если число слева меньше значения справа. Пример: допустим переменная $a = 1 и $b = 5, тогда выражение ($a -lt $b) будет иметь значение $True, а выражение ($b -lt 10) будет иметь значение $False."
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Строковые функции",
      "Elements": [
        {
          "Name": "$MyString.Replace(\"text\", \"newtext\")",
          "Description": "Замена подстроки новым значением. Пример: допустим переменная $str = \"This text\", тогда после выполнения выражения ($newstr = $str.Replace(\"text\", \"newtext\")) переменная $newstr будет иметь значение \"This newtext\""
        },
        {
          "Name": "$MyString.Contains(\"text\")",
          "Description": "Содержит ли строка другую строку. Возвращает $True/$False. Пример: допустим переменная $str = \"This text\", тогда после выполнения выражения ($result = $str.Contains(\"text\")) переменная $result будет иметь значение $True"
        },
        {
          "Name": "$MyString.Substring(0, 10)",
          "Description": "Возвращает указанное количество символов из строки, начиная с указанной позиции. Пример: допустим переменная $str = \"Съешь ещё этих мягких французских булок\", тогда после выполнения выражения ($newstr = $str.Substring(3, 10)) переменная $newstr будет иметь значение \"шь ещё эти\""
        },
        {
          "Name": "$MyString.Length",
          "Description": "Возвращает количество символов в строке. Пример: допустим переменная $str = \"This text\", тогда после выполнения выражения ($result = $str.Length) переменная $result будет иметь значение 9"
        },
        {
          "Name": "$MyString.Split(\",\")",
          "Description": "Разбивает объект String на массив строк путём разделения строки указанной подстрокой. Возвращает объект List<string>. Пример: допустим переменная $list = \"Съешь ещё этих мягких французских булок\", тогда после выполнения выражения ($newstr = $str.Split(\" \")) переменная $list будет иметь значение @(\"Съешь\",\"ещё\",\"этих\",\"мягких\",\"французских\",\"булок\")"
        },
        {
          "Name": "$MyString.Trim()",
          "Description": "Удаляет пробельные символы с начала и конца строки (пробел, табуляция, неразрывный пробел и прочие). Пример: допустим переменная $str = \"  This text \", тогда после выполнения выражения ($newstr = $str.Trim()) переменная $newstr будет иметь значение \"This text\""
        },
		{
          "Name": "$MyString.ToUpper()",
          "Description": "Преобразовывает строку в верхний регистр. Пример: допустим переменная $str = \"This text\", тогда после выполнения выражения ($result = $str.ToUpper()) переменная $result будет иметь значение \"THIS TEXT\""
        },
		{
          "Name": "$MyString.ToLower()",
          "Description": "Преобразовывает строку в нижний регистр. Пример: допустим переменная $str = \"This TEXT\", тогда после выполнения выражения ($result = $str.ToLower()) переменная $result будет иметь значение \"this text\""
        },
		{
          "Name": "$MyString.Insert(0, \"text\")",
          "Description": "Вставляет заданную строку в указанную позицию в исходной строке. Пример: допустим переменная $str = \"This TEXT\", тогда после выполнения выражения ($result = $str.Insert(0, \"text\")) переменная $result будет иметь значение \"textThis TEXT\""
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Примеры работы с таблицей данных",
      "Elements": [
        {
          "Name": "$Table.Columns.Count",
          "Description": "Получить количество столбцов в таблице"
        },
        {
          "Name": "$Table.Rows.Count",
          "Description": "Получить количество строк в таблице"
        },
        {
          "Name": "$Table.Columns[$index].Name",
          "Description": "Получить имя столбца по указанному индексу. Индексация начинается с 0."
        },
        {
          "Name": "$Table.Rows[$indexrow][$indexcol]",
          "Description": "Получить или задать значение ячейки по индексу столбца и строки. Где $indexrow - индекс строки, а $indexcol - индекс столбца. Индексация начинается с 0."
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Примеры работы с коллекцией",
      "Elements": [
        {
          "Name": "$List.Count",
          "Description": "Получить количество элементов в коллекции"
        },
        {
          "Name": "$Hashtable.Count",
          "Description": "Получить количество элементов в словаре"
        },
        {
          "Name": "$List[$Index]",
          "Description": "Получить элемент коллекции под номером, указанным в переменной $index. Первый элемент в коллекции имеет номер 0."
        },
        {
          "Name": "$List[0]",
          "Description": "Получить элемент коллекции по указанному индексу. Первый элемент в коллекции имеет номер 0."
        },
        {
          "Name": "$Hashtable[$Key]",
          "Description": "Получить элемент словаря по ключу, указанному в переменной $Key"
        },
        {
          "Name": "$Hashtable[\"Key\"]",
          "Description": "Получить элемент словаря по указанному ключу"
        },
		{
          "Name": "$Hashtable.ContainsKey($Key)",
          "Description": "Проверить наличие ключа в словаре"
        },
		{
          "Name": "$Hashtable.ContainsValue($Key)",
          "Description": "Проверить наличие значения в словаре"
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Форматы времени",
      "Elements": [
        {
          "Name": "\"dd.MM.yyyy HH:mm:ss\"",
          "Description": "Дата и время. Используется в блоке \"Преобразовать дату и время в текст\" категории \"Дата и время\" в свойстве \"Формат\""
        },
        {
          "Name": "\"yyyy\/MM\/dd HH:mm:ss\"",
          "Description": "Дата и время. Используется в блоке \"Преобразовать дату и время в текст\" категории \"Дата и время\" в свойстве \"Формат\""
        },
        {
          "Name": "\"dd.MM.yyyy\"",
          "Description": "Только дата. Используется в блоке \"Преобразовать дату и время в текст\" категории \"Дата и время\" в свойстве \"Формат\""
        },
        {
          "Name": "\"yyyy\/MM\/dd\"",
          "Description": "Только дата. Используется в блоке \"Преобразовать дату и время в текст\" категории \"Дата и время\" в свойстве \"Формат\""
        },
        {
          "Name": "\"HH:mm:ss\"",
          "Description": "Только время. Используется в блоке \"Преобразовать дату и время в текст\" категории \"Дата и время\" в свойстве \"Формат\""
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Примеры работы с объектом MailMessage",
      "Elements": [
        {
          "Name": "$Mail.From.Address",
          "Description": "Получить письмо в виде строки от указанного адреса. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
        {
          "Name": "$Mail.From.Name",
          "Description": "Получить письмо в виде строки по отображаемому имени. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
        {
          "Name": "$Mail.To.Address",
          "Description": "Получить письмо в виде строки от указанного адреса. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
        {
          "Name": "$Mail.To.Name",
          "Description": "Получить письмо в виде строки по отображаемому имени. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
        {
          "Name": "$Mail.Subject",
          "Description": "Получить тему письма в виде строки. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
        {
          "Name": "$Mail.Body",
          "Description": "Получить тело письма в виде строки. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
        {
          "Name": "$Mail.HtmlBody",
          "Description": "Получить тело письма в виде html строки если доступно. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
        {
          "Name": "$Mail.Date",
          "Description": "Получить дату письма в виде объекта DateTime. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
		{
          "Name": "$Mail.IsAttachments",
          "Description": "Проверяет наличие вложений в письме. Если вложения присутствуют, то возвращается $true, иначе $false. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
		{
          "Name": "$Mail.CountAttachments",
          "Description": "Возвращает количество вложений в письме. Используется после получения писем с сервера с помощью блоков \"Получить письма через POP3\" и \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
		{
          "Name": "$Mail.IsSeen",
          "Description": "Проверяется установлен ли статус \"Прочитано\" у письма. Если статус установлен то возвращается $true, иначе $false. Если этому свойству задать значение, то статус письма на сервере поменяется. Используется после получения писем с сервера с помощью блока \"Получить письма через IMAP\" категории \"Электронная почта\""
        },
		{
          "Name": "$Mail.Delete()",
          "Description": "Удаляет сообщение с сервера"
        }
      ]
    },
	{
      "Name": "-",
      "Elements": []
    },
	{
      "Name": "Примеры работы с объектом задачи TaskObject",
      "Elements": [
        {
          "Name": "$TaskObject.guid",
          "Description": "Возвращает guid задачи. Тип значения [string]"
        },
        {
          "Name": "$TaskObject.name",
          "Description": "Возвращает имя задачи. Тип значения [string]"
        },
		{
          "Name": "$TaskObject.description",
          "Description": "Возвращает описание задачи. Тип значения [string]"
        },
		{
          "Name": "$TaskObject.comment",
          "Description": "Возвращает комментарий задачи. Тип значения [string]"
        },
		{
          "Name": "$TaskObject.status",
          "Description": "Возвращает статус задачи. Тип значения [int]: New = 0; InProgress = 1; Success = 2; Failed (Application) = 3; Failed (Business) = 4; Abandoned = 5; Postponed = 6"
        },
		{
          "Name": "$TaskObject.priority",
          "Description": "Возвращает приоритет задачи. Тип значения [int]: Low = 0; Normal = 1; High = 2"
        },
		{
          "Name": "$TaskObject.parameters",
          "Description": "Возвращает параметры задачи. Тип значения [Text]/[DataTable]/[Hashtable]"
        },
		{
          "Name": "$TaskObject.created",
          "Description": "Возвращает дату и время создания задачи. Тип значения [DateTime]"
        },
		{
          "Name": "$TaskObject.updated",
          "Description": "Возвращает дату и время обновления задачи. Тип значения [DateTime]"
        },
		{
          "Name": "$TaskObject.postponed",
          "Description": "Возвращает дату и время отложенной задачи. Тип значения [DateTime]"
        },
		{
          "Name": "$TaskObject.deadline",
          "Description": "Возвращает дату и время дедлайна задачи. Тип значения [DateTime]"
        },
		{
          "Name": "$TaskObject.tags",
          "Description": "Возвращает теги. Тип значения [string]"
        }
      ]
    },
	{
      "Name": "-",
      "Elements": []
    },
	{
      "Name": "Примеры работы с объектом группы файлов FileGroupObject",
      "Elements": [
        {
          "Name": "$FileGroupObject.guid",
          "Description": "Возвращает guid группы файлов. Тип значения [string]"
        },
        {
          "Name": "$FileGroupObject.name",
          "Description": "Возвращает имя группы файлов. Тип значения [string]"
        },
		{
          "Name": "$FileGroupObject.description",
          "Description": "Возвращает описание группы файлов. Тип значения [string]"
        },
		{
          "Name": "$FileGroupObject.created",
          "Description": "Возвращает дату и время создания группы файлов. Тип значения [DateTime]"
        },
		{
          "Name": "$FileGroupObject.updated",
          "Description": "Возвращает дату и время обновления группы файлов. Тип значения [DateTime]"
        },
		{
          "Name": "$FileGroupObject.is_deleted",
          "Description": "Возвращает флаг удаления группы файлов. Тип значения [bool]"
        },
		{
          "Name": "$FileGroupObject.account_id",
          "Description": "Возвращает id аккаунта создателя группы файлов. Тип значения [int]"
        },
		{
          "Name": "$FileGroupObject.files",
          "Description": "Возвращает файлы этой группы. Тип значения [List] с объектами FileObject"
        }
      ]
    },
	{
      "Name": "-",
      "Elements": []
    },
	{
      "Name": "Примеры работы с объектом файла FileObject",
      "Elements": [
        {
          "Name": "$FileObject.guid",
          "Description": "Возвращает guid файла. Тип значения [string]"
        },
        {
          "Name": "$FileObject.name",
          "Description": "Возвращает имя файла. Тип значения [string]"
        },
		{
          "Name": "$FileObject.description",
          "Description": "Возвращает описание файла. Тип значения [string]"
        },
		{
          "Name": "$FileObject.created",
          "Description": "Возвращает дату и время создания файла. Тип значения [DateTime]"
        },
		{
          "Name": "$FileObject.updated",
          "Description": "Возвращает дату и время обновления файла. Тип значения [DateTime]"
        },
		{
          "Name": "$FileObject.folder_guid",
          "Description": "Возвращает guid группы файлов. Тип значения [string]"
        },
		{
          "Name": "$FileObject.file_name",
          "Description": "Возвращает имя файла с расширением. Тип значения [string]"
        },
		{
          "Name": "$FileObject.is_deleted",
          "Description": "Возвращает флаг удаления файла. Тип значения [bool]"
        },
		{
          "Name": "$FileObject.account_id",
          "Description": "Возвращает id аккаунта создателя файла. Тип значения [int]"
        },
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
	{
      "Name": "Примеры работы с объектом Cookie",
      "Elements": [
        {
          "Name": "$Cookie.Name",
          "Description": "Возвращает или задает имя Cookie. Тип значения [string]"
        },
        {
          "Name": "$Cookie.Value",
          "Description": "Возвращает или задает значение для объекта Cookie. Тип значения [string]"
        },
        {
          "Name": "$Cookie.Domain",
          "Description": "Возвращает или задает URI, для которого Cookie является допустимым. Тип значения [string]"
        },
        {
          "Name": "$Cookie.Path",
          "Description": "Возвращает или задает идентификаторы URI, к которым применяется Cookie. Тип значения [string]"
        },
        {
          "Name": "$Cookie.Expires",
          "Description": "Возвращает или задает для Cookie дату и время окончания действия. Тип значения [DateTime]"
        },
        {
          "Name": "$Cookie.Discard",
          "Description": "Возвращает или задает флаг сброса, задаваемый сервером. Значение $true, если клиент должен сбросить Cookie в конце текущего сеанса. Тип значения [bool]"
        },
        {
          "Name": "$Cookie.Secure",
          "Description": "Возвращает или задает уровень безопасности Cookie. Значение $true, если клиент должен только вернуть файл cookie в последующих запросах, при условии что запросы используют HTTPS. Тип значения [bool]"
        },
        {
          "Name": "$Cookie.HttpOnly",
          "Description": "Определяет, может ли получить доступ к файлу cookie скрипт страницы или другое активное содержимое. Тип значения [bool]"
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Файловые переменные",
      "Elements": [
        {
          "Name": "\"%USERPROFILE%\"",
          "Description": "Директория профиля. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%USERPROFILE%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\test.txt\""
        },
        {
          "Name": "\"%TEMP%\"",
          "Description": "Директория временной папки. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%TEMP%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\AppData\\Local\\Temp\\test.txt\""
        },
        {
          "Name": "\"%WINDIR%\"",
          "Description": "Директория папки Windows. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%WINDIR%\\test.txt\" будет преобразовано в \"C:\\Windows\\test.txt\""
        },
        {
          "Name": "\"%Desktop%\"",
          "Description": "Директория рабочего стола. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%Desktop%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\Desktop\\test.txt\""
        },
        {
          "Name": "\"%ApplicationData%\"",
          "Description": "Каталог, выполняющий функции общего репозитория для данных приложения текущего перемещающегося пользователя. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%ApplicationData%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\AppData\\Roaming\\test.txt\""
        },
        {
          "Name": "\"%Favorites%\"",
          "Description": "Каталог, служащий общим репозиторием для избранных элементов пользователя. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%Favorites%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\Favorites\\test.txt\""
        },
        {
          "Name": "\"%Fonts%\"",
          "Description": "Виртуальная папка, содержащая шрифты. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%Fonts%\\test.txt\" будет преобразовано в \"C:\\Windows\\Fonts\\test.txt\""
        },
        {
          "Name": "\"%LocalApplicationData%\"",
          "Description": "Каталог, служащий общим репозиторием данных приложения, используемых текущим пользователем, который не перемещается. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%LocalApplicationData%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\AppData\\Local\\test.txt\""
        },
        {
          "Name": "\"%MyDocuments%\"",
          "Description": "Папка Мои документы. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%MyDocuments%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\Documents\\test.txt\""
        },
        {
          "Name": "\"%MyMusic%\"",
          "Description": "Папка Моя музыка. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%MyMusic%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\Music\\test.txt\""
        },
        {
          "Name": "\"%MyPictures%\"",
          "Description": "Папка Мои рисунки. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%MyPictures%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\Pictures\\test.txt\""
        },
        {
          "Name": "\"%MyVideos%\"",
          "Description": "Каталог файловой системы, служащий репозиторием файлов видеозаписей, принадлежащих пользователю. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%MyVideos%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\Videos\\test.txt\""
        },
        {
          "Name": "\"%Personal%\"",
          "Description": "Каталог, служащий общим репозиторием для документов. Этот член эквивалентен MyDocuments. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%Personal%\\test.txt\" будет преобразовано в \"C:\\Users\\User\\Documents\\test.txt\""
        },
        {
          "Name": "\"%ProgramFiles%\"",
          "Description": "Каталог файлов программ. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%ProgramFiles%\\test.txt\" будет преобразовано в \"C:\\Program Files\\test.txt\""
        },
        {
          "Name": "\"%ProgramFilesX86%\"",
          "Description": "Папка Program Files x86. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%ProgramFilesX86%\\test.txt\" будет преобразовано в \"C:\\Program Files (x86)\\test.txt\""
        },
        {
          "Name": "\"%System%\"",
          "Description": "Каталог System. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%System%\\test.txt\" будет преобразовано в \"C:\\Windows\\system32\\test.txt\""
        },
        {
          "Name": "\"%SystemX86%\"",
          "Description": "Папка System ОС Windows. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%SystemX86%\\test.txt\" будет преобразовано в \"C:\\Windows\\SysWOW64\\test.txt\""
        },
        {
          "Name": "\"%Windows%\"",
          "Description": "Каталог Windows или SYSROOT. Можно использовать в любом блоке где указывается путь к файлу. Пример: указанное значение \"%Windows%\\test.txt\" будет преобразовано в \"C:\\Windows\\test.txt\""
        }
      ]
    },
    {
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Вспомогательные функции",
      "Elements": [
        {
          "Name": "[Robot.Helpers]::check_INN($Value)",
          "Description": "Проверка ИНН на валидность. На вход подается строка содержащее значение для проверки. При успешной проверке возвращается $True, иначе $False"
        },
        {
          "Name": "[Robot.Helpers]::check_KPP($Value)",
          "Description": "Проверка КПП на валидность. На вход подается строка содержащее значение для проверки. При успешной проверке возвращается $True, иначе $False"
        },
        {
          "Name": "[Robot.Helpers]::check_OGRN($Value)",
          "Description": "Проверка ОГРН на валидность. На вход подается строка содержащее значение для проверки. При успешной проверке возвращается $True, иначе $False"
        },
		{
			"Name": "[Robot.Helpers]::to_ColumnName($Value)",
          "Description": "Преобразование числового значения колонки Excel в ее строковое представление. Пример: число 100 будет преобразовано в строку \"CV\""
		}
      ]
    },
	{
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Строка подключения к базе данных",
      "Elements": [
        {
          "Name": "\"Server=myServerAddress;Database=myDataBase;\"",
          "Description": "Строка подключения к SQL Server"
        },
        {
          "Name": "\"Server=myServerAddress;Database=myDataBase;\"",
          "Description": "Строка подключения к MySQL"
        },
        {
          "Name": "\"Data Source=$filedb;Journal Mode=Off;\"",
          "Description": "Строка подключения к SQLite"
        },
		{
          "Name": "\"Database=SampleDatabase.fdb;DataSource=localhost;\"",
          "Description": "Строка подключения к Firebird"
        },
		{
          "Name": "\"Data Source=(DESCRIPTION=(CID=GTU_APP)(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=$Host)(PORT=$Port)))(CONNECT_DATA=(SERVICE_NAME=$Service)(SERVER=DEDICATED)));User Id=$User;Password=$Password;\"",
          "Description": "Строка подключения к Oracle"
        },
		{
          "Name": "\"Provider=Microsoft.ACE.OLEDB.12.0;Data Source='C:\\TEST.xlsx';Extended Properties='Excel 12.0 Xml;IMEX=1;HDR=YES;';\"",
          "Description": "Строка подключения к OleDB для работы с Excel. Извлечь данные можно так: \"SELECT * FROM [Лист1$];\""
        },
		{
          "Name": "\"Host=myserver;Database=mydatabase;\"",
          "Description": "Строка подключения к PostgreSQL"
        },
		{
          "Name": "\"DSN=MyDSN;\"",
          "Description": "Строка подключения к Odbc"
        }
      ]
    },
	{
      "Name": "-",
      "Elements": []
    },
    {
      "Name": "Фильтры для Outlook",
      "Elements": [
        {
          "Name": "\"@SQL=%yesterday(\"\"urn:schemas:httpmail:datereceived\"\")%\"",
          "Description": "Фильтр для вчерашнего дня"
        },
        {
          "Name": "\"@SQL=%today(\"\"urn:schemas:httpmail:datereceived\"\")%\"",
          "Description": "Фильтр для сегодняшнего дня"
        },
		{
          "Name": "\"@SQL=urn:schemas:httpmail:fromemail Like '%TEXT%'\"",
          "Description": "Фильтр для отправителя"
        }
      ]
    }
  ]
}